{"version":3,"file":"jwt.js","sourceRoot":"/","sources":["src/features/auth/services/jwt.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,kDAAoC;AAEpC,MAAM,EAAE,UAAU,EAAE,WAAW,EAAE,GAAG,OAAO,CAAC,GAAG,CAAC;AAEhD,MAAa,UAAU;IACR,MAAM,CAAC,EAAE,KAAK,EAAqB;;YAC9C,OAAO,GAAG,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,EAAE,UAAU,EAAE,EAAE,SAAS,EAAE,WAAW,EAAE,CAAC,CAAC;QACrE,CAAC;KAAA;IAEY,MAAM,CAAC,EAClB,SAAS,GAGV;;YACC,IAAI;gBACF,MAAM,SAAS,GAAG,GAAG,CAAC,MAAM,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;gBACpD,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC;aAC7C;YAAC,OAAO,KAAK,EAAE;gBACd,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC;aAChD;QACH,CAAC;KAAA;CACF;AAjBD,gCAiBC","sourcesContent":["import * as jwt from 'jsonwebtoken';\n\nconst { JWT_SECRET, JWT_EXPIRED } = process.env;\n\nexport class JWTService {\n  public async create({ email }: { email: string }): Promise<any> {\n    return jwt.sign({ email }, JWT_SECRET, { expiresIn: JWT_EXPIRED });\n  }\n\n  public async verify({\n    jwtSecret,\n  }: {\n    jwtSecret: string;\n  }): Promise<{ error: boolean; message: string }> {\n    try {\n      const validated = jwt.verify(jwtSecret, JWT_SECRET);\n      return { error: false, message: validated };\n    } catch (error) {\n      return { error: true, message: error.message };\n    }\n  }\n}\n"]}